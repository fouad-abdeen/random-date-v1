{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","specialDate","useState","dateIsChosen","setDateAsChosen","dateIsSetUp","setUpDate","day","setDay","month","setMonth","year","setYear","counterDuration","years","setYears","days","setDays","useEffect","firstDate","Date","getFullYear","secondDate","moment","fromNow","Math","round","abs","time","icon","faHeart","changeDay","myDay","format","changeMonth","myMonth","changeYear","myYear","setTimeout","tellHerILoveYou","formatValue","value","body","document","querySelector","message","createElement","innerHTML","className","i","msg","cloneNode","appendChild","htmlFor","type","name","onChange","duration","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oRAiIeA,EA1HH,WACV,IAAMC,EAAc,aADJ,EAEwBC,oBAAS,GAFjC,mBAETC,EAFS,KAEKC,EAFL,OAGiBF,oBAAS,GAH1B,mBAGTG,EAHS,KAGIC,EAHJ,OAIMJ,mBAAS,MAJf,mBAITK,EAJS,KAIJC,EAJI,OAKUN,mBAAS,MALnB,mBAKTO,EALS,KAKFC,EALE,OAMQR,mBAAS,QANjB,mBAMTS,EANS,KAMHC,EANG,OAOUV,mBAAS,KAA5BW,EAPS,sBAQUX,mBAAS,GARnB,mBAQTY,EARS,KAQFC,EARE,OASQb,mBAAS,GATjB,mBASTc,EATS,KASHC,EATG,KAWhBC,qBAAU,WACR,IACMC,EAAY,IAAIC,MAAK,IAAIA,MAAOC,cAAe,EAAG,GAClDC,EAAa,IAAIF,KAEvBL,EAASQ,IAAOtB,GAAauB,SAAQ,IACrCP,EAAQQ,KAAKC,MAAMD,KAAKE,KAAKR,EAAYG,GAL1B,WAMd,IAEH,IAAMM,EACJ,+BACGd,EADH,MACaE,EAAO,EAAIA,EAAO,QAAU,KAAOA,EAAO,QACrD,cAAC,IAAD,CAAiBa,KAAMC,SAYrBC,EAAY,WAChB,IAAMC,EAAQT,IAAOtB,GAAagC,OAAO,MACzCzB,EAAOwB,GACPE,KAGIA,EAAc,WAClB,IAAMC,EAAUZ,IAAOtB,GAAagC,OAAO,MAC3CvB,EAASyB,GACTC,KAGIA,EAAa,WACjB,IAAMC,EAASd,IAAOtB,GAAagC,OAAO,QAC1CrB,EAAQyB,GACRC,YAAW,WACThC,GAAU,KACT,KACHgC,YAAW,WACTC,MACC,MAGCC,EAAc,SAACC,GAAD,iBAAeA,IAU7BF,EAAkB,WACtB,IAAMG,EAAOC,SAASC,cAAc,SAC9BC,EAAUF,SAASG,cAAc,MACvCD,EAAQE,UAAY,oBACpBF,EAAQG,UAAY,YACpB,IAAK,IAAIC,EAAI,EAAGA,EAAI,KAAMA,IAAK,CAC7B,IAAMC,EAAML,EAAQM,WAAU,GAC9BT,EAAKU,YAAYF,KAIrB,OACE,sBAAKF,UAAU,MAAf,UACE,sBAAKA,UAAU,cAAf,UACE,uBAAOK,QAAQ,OAAOL,UAAU,YAAhC,SACE,wDAEF,uBACEM,KAAK,OACLC,KAAK,OACLP,UAAU,+BACVQ,SA9De,WACrBpD,GAAgB,GAChBI,EAAO,MACPE,EAAS,MACTE,EAAQ,QACRmB,UA6DE,uBAEA,qBAAIiB,UAAU,iBAAd,UACE,cAAC,IAAD,CACEP,MAAOlC,EACPiC,YAAaA,EACbiB,SAAU5C,IAEZ,cAAC,IAAD,CACE4B,MAAOhC,EACP+B,YAAaA,EACbiB,SAAU5C,IAEZ,cAAC,IAAD,CACE4B,MAAO9B,EACP6B,YAhDgB,SAACC,GACvB,OAAItC,EACKsC,EAED,MAAN,OAAaA,IA6CTgB,SAAU5C,OAId,qBAAKmC,UAAU,iBAAf,UACmB,IAAhB3C,EAAuB,+BAAOuB,IAAe,2BAGhD,qBAAKoB,UAAU,uBChHNU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1B,SAAS2B,eAAe,SAM1BZ,M","file":"static/js/main.31d16dcb.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport moment from \"moment\";\nimport AnimatedNumber from \"animated-number-react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart } from \"@fortawesome/free-solid-svg-icons\";\n\nconst App = () => {\n  const specialDate = \"2020-04-03\";\n  const [dateIsChosen, setDateAsChosen] = useState(false);\n  const [dateIsSetUp, setUpDate] = useState(false);\n  const [day, setDay] = useState(\"00\");\n  const [month, setMonth] = useState(\"00\");\n  const [year, setYear] = useState(\"0000\");\n  const [counterDuration] = useState(3000);\n  const [years, setYears] = useState(0);\n  const [days, setDays] = useState(0);\n\n  useEffect(() => {\n    const oneDay = 24 * 60 * 60 * 1000;\n    const firstDate = new Date(new Date().getFullYear(), 3, 3);\n    const secondDate = new Date();\n\n    setYears(moment(specialDate).fromNow(true));\n    setDays(Math.round(Math.abs((firstDate - secondDate) / oneDay)));\n  }, []);\n\n  const time = (\n    <h3>\n      {years} & {days > 1 ? days + \" days\" : \"a \" + days + \" day \"}\n      <FontAwesomeIcon icon={faHeart} />\n    </h3>\n  );\n\n  const handleinputDay = () => {\n    setDateAsChosen(true);\n    setDay(\"00\");\n    setMonth(\"00\");\n    setYear(\"0000\");\n    changeDay();\n  };\n\n  const changeDay = () => {\n    const myDay = moment(specialDate).format(\"DD\");\n    setDay(myDay);\n    changeMonth();\n  };\n\n  const changeMonth = () => {\n    const myMonth = moment(specialDate).format(\"MM\");\n    setMonth(myMonth);\n    changeYear();\n  };\n\n  const changeYear = () => {\n    const myYear = moment(specialDate).format(\"YYYY\");\n    setYear(myYear);\n    setTimeout(() => {\n      setUpDate(true);\n    }, 5000);\n    setTimeout(() => {\n      tellHerILoveYou();\n    }, 7000);\n  };\n\n  const formatValue = (value) => `0${value}`;\n\n  const formatYearValue = (value) => {\n    if (dateIsChosen) {\n      return value;\n    } else {\n      return `000${value}`;\n    }\n  };\n\n  const tellHerILoveYou = () => {\n    const body = document.querySelector(\".love\");\n    const message = document.createElement(\"h5\");\n    message.innerHTML = \"I love you Layla!\";\n    message.className = \"mt-5 mb-2\";\n    for (let i = 1; i < 2020; i++) {\n      const msg = message.cloneNode(true);\n      body.appendChild(msg);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"date-picker\">\n        <label htmlFor=\"date\" className=\"mt-5 mb-2\">\n          <h4>Choose a Random Date</h4>\n        </label>\n        <input\n          type=\"date\"\n          name=\"date\"\n          className=\"mb-5 btn-light  form-control\"\n          onChange={handleinputDay}\n        />\n      </div>\n\n      <br />\n\n      <h1 className=\"date mt-5 mb-5\">\n        <AnimatedNumber\n          value={day}\n          formatValue={formatValue}\n          duration={counterDuration}\n        />\n        <AnimatedNumber\n          value={month}\n          formatValue={formatValue}\n          duration={counterDuration}\n        />\n        <AnimatedNumber\n          value={year}\n          formatValue={formatYearValue}\n          duration={counterDuration}\n        />\n      </h1>\n\n      <div className=\"time mt-5 mb-5\">\n        {dateIsSetUp === true ? <span>{time}</span> : <span></span>}\n      </div>\n\n      <div className=\"love mt-5 mb-5\" />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}